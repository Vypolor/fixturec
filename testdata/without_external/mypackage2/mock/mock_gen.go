// Code generated by MockGen. DO NOT EDIT.
// Source: ./interface.go
//
// Generated by this command:
//
//	mockgen -destination=mock/mock_gen.go -package=mock -source=./interface.go
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMyType2 is a mock of MyType2 interface.
type MockMyType2 struct {
	ctrl     *gomock.Controller
	recorder *MockMyType2MockRecorder
}

// MockMyType2MockRecorder is the mock recorder for MockMyType2.
type MockMyType2MockRecorder struct {
	mock *MockMyType2
}

// NewMockMyType2 creates a new mock instance.
func NewMockMyType2(ctrl *gomock.Controller) *MockMyType2 {
	mock := &MockMyType2{ctrl: ctrl}
	mock.recorder = &MockMyType2MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMyType2) EXPECT() *MockMyType2MockRecorder {
	return m.recorder
}

// Call2 mocks base method.
func (m *MockMyType2) Call2() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call2")
	ret0, _ := ret[0].(int)
	return ret0
}

// Call2 indicates an expected call of Call2.
func (mr *MockMyType2MockRecorder) Call2() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call2", reflect.TypeOf((*MockMyType2)(nil).Call2))
}
